{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Swagger test",
    "description": "Show",
    "license": {
      "name": "MIT",
      "url": ""
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://team-project-backend-881k.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    }
  ],

  "paths": {
    "api/auth/registration": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registartion's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistartionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Rgistartion's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User is logged in"
          },

          "400": {
            "description": "Login Error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer your_token_here"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "The user is logged out."
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "api/users/curren": {
      "get": {
        "tags": ["Auth"],
        "summary": "Current user",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Bearer your_token_here"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Information found"
          },
          "401": {
            "description": "Missing header with authorization token."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Getting all notices"
      },
      "post": {
        "tags": ["Notices"],
        "summary": "Adding new notice",
        "parameters": [],
        "requestBody": {
          "description": "Object notice's data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoticesPostRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Dima"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "pattern": "/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*d).+$/",
            "example": "qWerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 6,
            "maxLength": 16,
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*d).+$/",
            "example": "qWerty123"
          }
        }
      },

      "AllNoticesGetResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Notice's title",
              "example": "Give funny pet"
            },
            "name": {
              "type": "string",
              "description": "Pet's name",
              "example": "Jerry"
            },
            "sex": {
              "type": "string",
              "description": "Pet's gender",
              "example": "male"
            },
            "_category": {
              "type": "string",
              "description": "Category's ID",
              "example": "64e0f7da190f76f8b370b383"
            },
            "favorite": {
              "type": "boolean",
              "description": "Is this notice favorite?",
              "example": false
            },
            "photo": {
              "type": "string",
              "description": "Path to pet's photo",
              "example": "./img/path-to-photo.jpg"
            },
            "place": {
              "type": "string",
              "description": "Pet's location",
              "example": "Lviv"
            },
            "birthday": {
              "type": "string",
              "description": "Pet's birthday",
              "birthday": "01.01.2022"
            },
            "type": {
              "type": "string",
              "description": "Pet's type",
              "example": "pug"
            },
            "describe": {
              "type": "string",
              "description": "Pet's description",
              "example": "Really funny pet"
            },
            "_id": {
              "type": "string",
              "description": "Notice's ID",
              "example": "64e37426acdd8b99c6bf6018"
            },
            "createdAt": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            }
          }
        }
      },
      "NoticesPostRequest": {
        "type": "object",
        "required": [
          "title",
          "name",
          "sex",
          "_category",
          "place",
          "birthday",
          "type"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Notice's title",
            "example": "Give funny pet"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jerry"
          },
          "sex": {
            "type": "string",
            "description": "Pet's gender",
            "example": "male"
          },
          "_category": {
            "type": "string",
            "description": "Category's ID",
            "example": "64e0f7da190f76f8b370b383"
          },
          "favorite": {
            "type": "boolean",
            "description": "Is this notice favorite?",
            "example": false
          },
          "photo": {
            "type": "string",
            "description": "Path to pet's photo",
            "example": "./img/path-to-photo.jpg"
          },
          "place": {
            "type": "string",
            "description": "Pet's location",
            "example": "Lviv"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday",
            "birthday": "01.01.2022"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "pug"
          },
          "describe": {
            "type": "string",
            "description": "Pet's description",
            "example": "Really funny pet"
          }
        }
      },
      "NoticesPostResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Notice's title",
            "example": "Give funny pet"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jerry"
          },
          "sex": {
            "type": "string",
            "description": "Pet's gender",
            "example": "male"
          },
          "_category": {
            "type": "string",
            "description": "Category's ID",
            "example": "64e0f7da190f76f8b370b383"
          },
          "favorite": {
            "type": "boolean",
            "description": "Is this notice favorite?",
            "example": false
          },
          "photo": {
            "type": "string",
            "description": "Path to pet's photo",
            "example": "./img/path-to-photo.jpg"
          },
          "place": {
            "type": "string",
            "description": "Pet's location",
            "example": "Lviv"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday",
            "birthday": "01.01.2022"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "pug"
          },
          "describe": {
            "type": "string",
            "description": "Pet's description",
            "example": "Really funny pet"
          },
          "_id": {
            "type": "string",
            "description": "Notice's ID",
            "example": "64e37426acdd8b99c6bf6018"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "RegistartionResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dima"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      }
    },
    "responses": {
      "Ok": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegistrationRequest"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request (invalid request body)"
      },
      "AlreadyReserved": {
        "description": "Provided email already exists"
      },
      "ServerError": {
        "description": "Server error"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
